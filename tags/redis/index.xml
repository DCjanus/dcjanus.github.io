<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Redis - 标签 - DCjanus 的博客</title><link>https://blog.dcjanus.com/tags/redis/</link><description>Redis - 标签 - DCjanus 的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>dcjanus@dcjanus.com (DCjanus)</managingEditor><webMaster>dcjanus@dcjanus.com (DCjanus)</webMaster><lastBuildDate>Fri, 04 Jul 2025 01:34:15 +0800</lastBuildDate><atom:link href="https://blog.dcjanus.com/tags/redis/" rel="self" type="application/rss+xml"/><item><title>LZF 流式解压</title><link>https://blog.dcjanus.com/posts/streaming-lzf-decode/</link><pubDate>Fri, 04 Jul 2025 01:34:15 +0800</pubDate><author><name>DCjanus</name><uri>https://github.com/dcjanus</uri><email>DCjanus@dcjanus.com</email></author><guid>https://blog.dcjanus.com/posts/streaming-lzf-decode/</guid><description><![CDATA[<p>我最近在业余时间重写一个之前为工作开发的 Redis RDB 解析工具<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，旧版工具在处理大 Key 时内存占用过高，有时会触发容器的内存限制，导致解析失败。因此，新版本的核心目标是实现增量解析。</p>
<p>Redis 中对字符串对象，允许使用 LZF 压缩来节省空间，但常见 LZF 实现都只支持一次性解压，仍无法彻底规避内存问题。简单了解 LZF 算法后，发现其实现极为简单，且有流式解压的潜力，因此决定自己实现一个流式解压器。</p>]]></description></item></channel></rss>